# .github/workflows/release.yml

name: Rust CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libncurses5-dev
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: cargo test --verbose

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libncurses5-dev
      
      - name: Build
        run: cargo build --verbose
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cwordle
          path: target/debug/cwordle

  release:
    name: Release ${{ matrix.target }}
    needs: test
    if: github.event_name == 'release'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: cwordle
            asset_name: cwordle-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: cwordle.exe
            asset_name: cwordle-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: cwordle
            asset_name: cwordle-macos-amd64

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libncurses5-dev
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
